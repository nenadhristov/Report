{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjects\\\\clinicalsapp\\\\src\\\\components\\\\ChartGenerator.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ChartGenerator extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      clinicalData: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get(\"http://localhost:8080/clinicalservices/api/clinicals/\" + this.props.match.params.patientId + \"/\" + this.props.match.params.componentName).then(res => {\n      this.setState({\n        clinicalData: res.data\n      });\n    });\n  }\n\n  render() {\n    var Vreme = new Array();\n    var myArray = new Array();\n    this.state.clinicalData.map((item, index) => {\n      myArray.push(item.componentValue);\n      Vreme.push(item.measuredDateTime);\n    });\n    var VisokPritisok = new Array();\n    var NizokPritisok = new Array();\n    myArray.forEach(element => VisokPritisok.push(element.split('/')[0]));\n    myArray.forEach(element => NizokPritisok.push(element.split('/')[1]));\n\n    function LineChart() {\n      const type = {\n        type: 'line'\n      };\n      const data = {\n        labels: Vreme,\n        datasets: [{\n          label: 'Systolic',\n          data: VisokPritisok,\n          borderColor: ['rgba(255,206,86 ,0.2)'],\n          backgroundColor: ['rgba(240,128,128,0.2)'],\n          pointBackgroundColor: 'rgba(255,206,86 ,0.2)',\n          pointBorderColor: 'rgba(255,206,86 ,0.2))'\n        }, {\n          label: 'Dystolic',\n          data: NizokPritisok,\n          borderColor: ['rgba(54,162,235 ,0.2)'],\n          backgroundColor: ['rgba(54,162,235 ,0.2)'],\n          pointBackgroundColor: 'rgba(54,162,235 ,0.2)',\n          pointBorderColor: 'rgba(54,162,235 ,0.2)'\n        }]\n      };\n      const options = {\n        title: {\n          display: true,\n          text: \"Line Chart\"\n        }\n      };\n      return /*#__PURE__*/_jsxDEV(Line, {\n        type: type,\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart\",\n        children: /*#__PURE__*/_jsxDEV(LineChart, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default ChartGenerator;","map":{"version":3,"sources":["D:/ReactProjects/clinicalsapp/src/components/ChartGenerator.js"],"names":["React","axios","Line","ChartGenerator","Component","state","clinicalData","componentDidMount","get","props","match","params","patientId","componentName","then","res","setState","data","render","Vreme","Array","myArray","map","item","index","push","componentValue","measuredDateTime","VisokPritisok","NizokPritisok","forEach","element","split","LineChart","type","labels","datasets","label","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","options","title","display","text"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\nimport '../App.css';\r\nclass ChartGenerator extends React.Component{\r\n\r\n    state={\r\n        clinicalData:[]\r\n        \r\n    }\r\n    \r\n \r\n    \r\n    \r\n    \r\n\r\n    componentDidMount(){\r\n        \r\n        axios.get(\"http://localhost:8080/clinicalservices/api/clinicals/\"+this.props.match.params.patientId+\"/\"+this.props.match.params.componentName).then(res=>{\r\n\r\n            this.setState({ clinicalData: res.data });\r\n        })\r\n\r\n    }\r\n\r\n    render(){\r\n        var Vreme = new Array();\r\n        var myArray = new Array();\r\n        this.state.clinicalData.map((item,index)=>{\r\n            myArray.push(item.componentValue);\r\n            Vreme.push(item.measuredDateTime)\r\n\r\n        })\r\n        var VisokPritisok = new Array();\r\n        var NizokPritisok = new Array();\r\n        myArray.forEach(element => \r\n            VisokPritisok.push(element.split('/')[0])\r\n            );\r\n\r\n        myArray.forEach(element => \r\n            NizokPritisok.push(element.split('/')[1])\r\n                 );\r\n\r\n\r\n        function LineChart(){\r\n            const type={\r\n\r\n                type: 'line'\r\n            }\r\n            const data = {\r\n                labels:Vreme,\r\n                datasets:[\r\n                    {\r\n                        label: 'Systolic',\r\n                        data:VisokPritisok,\r\n                        borderColor: ['rgba(255,206,86 ,0.2)'],     \r\n                        backgroundColor:['rgba(240,128,128,0.2)'],                \r\n                        pointBackgroundColor:'rgba(255,206,86 ,0.2)',\r\n                        pointBorderColor:'rgba(255,206,86 ,0.2))'\r\n                    },\r\n                    {\r\n                        label:'Dystolic',\r\n                        data:NizokPritisok,\r\n                        borderColor: ['rgba(54,162,235 ,0.2)'],\r\n                        backgroundColor:['rgba(54,162,235 ,0.2)'], \r\n                        pointBackgroundColor:'rgba(54,162,235 ,0.2)',\r\n                        pointBorderColor:'rgba(54,162,235 ,0.2)'\r\n                    }\r\n                ]\r\n               \r\n            }\r\n            const options ={\r\n                title:{\r\n                    display: true,\r\n                    text:\"Line Chart\"\r\n\r\n                }\r\n\r\n                \r\n\r\n            }\r\n            return(\r\n                <Line type={type} data={data} options={options}/>\r\n            )\r\n        }\r\n       \r\n        return (<div>    \r\n\r\n                <div className='chart'>\r\n                    <LineChart/>\r\n                </div>\r\n\r\n        </div>);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default ChartGenerator;"]},"metadata":{},"sourceType":"module"}